#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RepoDoctor MCP Server...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –≤–µ—Ä—Å–∏–∏
const nodeVersion = process.version;
console.log(`üì¶ Node.js –≤–µ—Ä—Å–∏—è: ${nodeVersion}`);

const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
if (majorVersion < 18) {
    console.error('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Node.js –≤–µ—Ä—Å–∏–∏ 18 –∏–ª–∏ –≤—ã—à–µ');
    process.exit(1);
}
console.log('‚úÖ Node.js –≤–µ—Ä—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
    'build/index.js',
    'package.json',
    'tsconfig.json'
];

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
for (const file of requiredFiles) {
    try {
        require('fs').accessSync(path.join(__dirname, file));
        console.log(`‚úÖ ${file}`);
    } catch (err) {
        console.log(`‚ùå ${file} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        process.exit(1);
    }
}
console.log();

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
const serverPath = path.join(__dirname, 'build', 'index.js');

const child = spawn('node', [serverPath], {
    cwd: __dirname,
    stdio: ['pipe', 'pipe', 'pipe']
});

let output = '';
let errorOutput = '';

child.stdout.on('data', (data) => {
    output += data.toString();
});

child.stderr.on('data', (data) => {
    errorOutput += data.toString();
});

// –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
setTimeout(() => {
    child.kill('SIGTERM');
}, 3000);

child.on('close', (code, signal) => {
    if (signal === 'SIGTERM') {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ (–∑–∞–≤–µ—Ä—à—ë–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)');
    } else if (code === 0) {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
        console.log(`‚ùå –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
    }
    
    if (output) {
        console.log('\nüìù –í—ã–≤–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞:');
        console.log(output);
    }
    
    if (errorOutput) {
        console.log('\n‚ö†Ô∏è –û—à–∏–±–∫–∏:');
        console.log(errorOutput);
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìñ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Cline');
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (‚öôÔ∏è)');
    console.log('3. –í—ã–±–µ—Ä–∏—Ç–µ "MCP Servers"');
    console.log('4. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä:');
    console.log(`   Name: repodoctor`);
    console.log(`   Command: node`);
    console.log(`   Args: ${serverPath}`);
    console.log(`   Working Directory: ${__dirname}`);
    console.log('5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cline');
    console.log('6. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å: "–ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞?"');
});

child.on('error', (err) => {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err.message}`);
    process.exit(1);
});
